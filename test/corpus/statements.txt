================================================================================
Import statements
================================================================================

import a, b
import b.c as d
import a.b.c

--------------------------------------------------------------------------------

(module
  (import_statement
    (dotted_name
      (identifier))
    (dotted_name
      (identifier)))
  (import_statement
    (aliased_import
      (dotted_name
        (identifier)
        (identifier))
      (identifier)))
  (import_statement
    (dotted_name
      (identifier)
      (identifier)
      (identifier))))

================================================================================
Import-from statements
================================================================================

from a import b
from a import *
from a import (b, c)
from a.b import c
from . import b
from .. import b
from .a import b
from ..a import b

--------------------------------------------------------------------------------

(module
  (import_from_statement
    (dotted_name
      (identifier))
    (dotted_name
      (identifier)))
  (import_from_statement
    (dotted_name
      (identifier))
    (wildcard_import))
  (import_from_statement
    (dotted_name
      (identifier))
    (dotted_name
      (identifier))
    (dotted_name
      (identifier)))
  (import_from_statement
    (dotted_name
      (identifier)
      (identifier))
    (dotted_name
      (identifier)))
  (import_from_statement
    (relative_import
      (import_prefix))
    (dotted_name
      (identifier)))
  (import_from_statement
    (relative_import
      (import_prefix))
    (dotted_name
      (identifier)))
  (import_from_statement
    (relative_import
      (import_prefix)
      (dotted_name
        (identifier)))
    (dotted_name
      (identifier)))
  (import_from_statement
    (relative_import
      (import_prefix)
      (dotted_name
        (identifier)))
    (dotted_name
      (identifier))))

================================================================================
Assert statements
================================================================================

assert a
assert b, c

--------------------------------------------------------------------------------

(module
  (assert_statement
    (identifier))
  (assert_statement
    (identifier)
    (identifier)))

================================================================================
Expression statements
================================================================================

a
b + c
1, 2, 3
1, 2, 3,

--------------------------------------------------------------------------------

(module
  (expression_statement
    (identifier))
  (expression_statement
    (binary_operator
      (identifier)
      (identifier)))
  (expression_statement
    (integer)
    (integer)
    (integer))
  (expression_statement
    (integer)
    (integer)
    (integer)))

================================================================================
Delete statements
================================================================================

del a[1], b[2]

--------------------------------------------------------------------------------

(module
  (delete_statement
    (expression_list
      (subscript
        (identifier)
        (integer))
      (subscript
        (identifier)
        (integer)))))

================================================================================
Control-flow statements
================================================================================

while true:
  pass
  break
  continue

--------------------------------------------------------------------------------

(module
  (while_statement
    condition: (identifier)
    body: (block
      (pass_statement)
      (break_statement)
      (continue_statement))))

================================================================================
Return statements
================================================================================

return
return a + b, c
return not b

--------------------------------------------------------------------------------

(module
  (return_statement)
  (return_statement
    (expression_list
      (binary_operator
        (identifier)
        (identifier))
      (identifier)))
  (return_statement
    (not_operator
      (identifier))))

================================================================================
If statements
================================================================================

if a:
  b
  c

--------------------------------------------------------------------------------

(module
  (if_statement
    condition: (identifier)
    consequence: (block
      (expression_statement
        (identifier))
      (expression_statement
        (identifier)))))

================================================================================
If else statements
================================================================================

if a:
  b
elif c:
  d
else:
  f

if a:
  b
else:
  f

if a: b

if a: b; c

--------------------------------------------------------------------------------

(module
  (if_statement
    condition: (identifier)
    consequence: (block
      (expression_statement
        (identifier)))
    alternative: (elif_clause
      condition: (identifier)
      consequence: (block
        (expression_statement
          (identifier))))
    alternative: (else_clause
      body: (block
        (expression_statement
          (identifier)))))
  (if_statement
    condition: (identifier)
    consequence: (block
      (expression_statement
        (identifier)))
    alternative: (else_clause
      body: (block
        (expression_statement
          (identifier)))))
  (if_statement
    condition: (identifier)
    consequence: (block
      (expression_statement
        (identifier))))
  (if_statement
    condition: (identifier)
    consequence: (block
      (expression_statement
        (identifier))
      (expression_statement
        (identifier)))))

================================================================================
Nested if statements
================================================================================

if a:
  if b:
    c
  else:
    if e:
      f
g

--------------------------------------------------------------------------------

(module
  (if_statement
    condition: (identifier)
    consequence: (block
      (if_statement
        condition: (identifier)
        consequence: (block
          (expression_statement
            (identifier)))
        alternative: (else_clause
          body: (block
            (if_statement
              condition: (identifier)
              consequence: (block
                (expression_statement
                  (identifier)))))))))
  (expression_statement
    (identifier)))

================================================================================
While statements
================================================================================

while a:
  b

while c:
  d
else:
  e
  f

--------------------------------------------------------------------------------

(module
  (while_statement
    condition: (identifier)
    body: (block
      (expression_statement
        (identifier))))
  (while_statement
    condition: (identifier)
    body: (block
      (expression_statement
        (identifier)))
    alternative: (else_clause
      body: (block
        (expression_statement
          (identifier))
        (expression_statement
          (identifier))))))

================================================================================
For statements
================================================================================

for line, i in lines:
  pass
  for character, j in line:
    pass
else:
  print x

for x, in [(1,), (2,), (3,)]:
  x

--------------------------------------------------------------------------------

(module
  (for_statement
    (pattern_list
      (identifier)
      (identifier))
    (identifier)
    (block
      (pass_statement)
      (for_statement
        (pattern_list
          (identifier)
          (identifier))
        (identifier)
        (block
          (pass_statement))))
    (else_clause
      (ERROR
        (identifier))
      (block
        (expression_statement
          (identifier)))))
  (for_statement
    (pattern_list
      (identifier))
    (list
      (tuple
        (integer))
      (tuple
        (integer))
      (tuple
        (integer)))
    (block
      (expression_statement
        (identifier)))))

================================================================================
Function definitions
================================================================================

def e((a,b)):
  return (a,b)

def e(*list: str):
  pass

def e(**list: str):
  pass

def f():
  pass

def g(h, i, /, j, *, k=100, **kwarg):
  return h,i,j,k,kwarg

def h(*a):
  i((*a))
  j(((*a)))

--------------------------------------------------------------------------------

(module
  (function_definition
    (identifier)
    (parameters
      (tuple_pattern
        (identifier)
        (identifier)))
    (block
      (return_statement
        (tuple
          (identifier)
          (identifier)))))
  (function_definition
    (identifier)
    (parameters
      (typed_parameter
        (list_splat_pattern
          (identifier))
        (type
          (identifier))))
    (block
      (pass_statement)))
  (function_definition
    (identifier)
    (parameters
      (typed_parameter
        (dictionary_splat_pattern
          (identifier))
        (type
          (identifier))))
    (block
      (pass_statement)))
  (function_definition
    (identifier)
    (parameters)
    (block
      (pass_statement)))
  (function_definition
    (identifier)
    (parameters
      (identifier)
      (identifier)
      (positional_separator)
      (identifier)
      (keyword_separator)
      (default_parameter
        (identifier)
        (integer))
      (dictionary_splat_pattern
        (identifier)))
    (block
      (return_statement
        (expression_list
          (identifier)
          (identifier)
          (identifier)
          (identifier)
          (identifier)))))
  (function_definition
    (identifier)
    (parameters
      (list_splat_pattern
        (identifier)))
    (block
      (expression_statement
        (call
          (identifier)
          (argument_list
            (parenthesized_expression
              (list_splat
                (identifier))))))
      (expression_statement
        (call
          (identifier)
          (argument_list
            (parenthesized_expression
              (parenthesized_expression
                (list_splat
                  (identifier))))))))))

================================================================================
Empty blocks
================================================================================

# These are not actually valid python; blocks
# must contain at least one statement. But we
# allow them because error recovery for empty
# blocks doesn't work very well otherwise.
def a(b, c):

if d:
  pass
  while f():

--------------------------------------------------------------------------------

    (module
      (comment)
      (comment)
      (comment)
      (comment)
      (function_definition
        (identifier)
        (parameters
          (identifier)
          (identifier))
        (block))
      (if_statement
        (identifier)
        (block
          (pass_statement)
          (while_statement
            (call
              (identifier)
              (argument_list))
            (block)))))

================================================================================
Decorated definitions
================================================================================

@f()
def f():
  g

--------------------------------------------------------------------------------

(module
  (decorated_definition
    (decorator
      (call
        (identifier)
        (argument_list)))
    (function_definition
      (identifier)
      (parameters)
      (block
        (expression_statement
          (identifier))))))

================================================================================
Raise statements
================================================================================

raise
raise RuntimeError('NO')
raise RunTimeError('NO') from e

--------------------------------------------------------------------------------

(module
  (raise_statement)
  (raise_statement
    (call
      (identifier)
      (argument_list
        (string))))
  (raise_statement
    (call
      (identifier)
      (argument_list
        (string)))
    (identifier)))

================================================================================
Comments
================================================================================

log a
# hi
log b # bye
log c

--------------------------------------------------------------------------------

(module
  (log_statement
    (identifier))
  (comment)
  (log_statement
    (identifier))
  (comment)
  (log_statement
    (identifier)))

================================================================================
Comments at different indentation levels
================================================================================

if a:
  # one
# two
    # three
  b
    # four
  c

--------------------------------------------------------------------------------

(module
  (if_statement
    (identifier)
    (comment)
    (comment)
    (comment)
    (block
      (expression_statement
        (identifier))
      (comment)
      (expression_statement
        (identifier)))))

================================================================================
Comments after dedents
================================================================================

if a:
  b

# one
c

--------------------------------------------------------------------------------

(module
  (if_statement
    (identifier)
    (block
      (expression_statement
        (identifier))))
  (comment)
  (expression_statement
    (identifier)))

================================================================================
Comments at the ends of indented blocks
================================================================================

if a:
  b
  # one
  # two

if c:
  d
    # three
      # four

# five

--------------------------------------------------------------------------------

(module
  (if_statement
    (identifier)
    (block
      (expression_statement
        (identifier))
      (comment)
      (comment)))
  (if_statement
    (identifier)
    (block
      (expression_statement
        (identifier))
      (comment)
      (comment)))
  (comment))

================================================================================
Newline tokens followed by comments
================================================================================

log a
  # We need to recognize the newline *preceding* this comment, because there's no newline after it
--------------------------------------------------------------------------------

(module
  (log_statement
    (identifier))
  (comment))

================================================================================
Extra newlines
================================================================================

if a:


    b()


    c()


    def d():


        e()


    f()

--------------------------------------------------------------------------------

(module
  (if_statement
    (identifier)
    (block
      (expression_statement
        (call
          (identifier)
          (argument_list)))
      (expression_statement
        (call
          (identifier)
          (argument_list)))
      (function_definition
        (identifier)
        (parameters)
        (block
          (expression_statement
            (call
              (identifier)
              (argument_list)))))
      (expression_statement
        (call
          (identifier)
          (argument_list))))))

================================================================================
Escaped newline
================================================================================

len("a") \
or len("aa")

--------------------------------------------------------------------------------

(module
  (expression_statement
    (boolean_operator
      (call
        (identifier)
        (argument_list
          (string)))
      (call
        (identifier)
        (argument_list
          (string))))))

================================================================================
Statements with semicolons
================================================================================

foo;
foo; bar
foo; bar;

--------------------------------------------------------------------------------

(module
  (expression_statement
    (identifier))
  (expression_statement
    (identifier))
  (expression_statement
    (identifier))
  (expression_statement
    (identifier))
  (expression_statement
    (identifier)))
